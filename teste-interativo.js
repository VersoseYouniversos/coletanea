// Teste Interativo - Simula√ß√£o de Cliques e Execu√ß√£o
// Execute este c√≥digo no console do navegador para testar as funcionalidades

console.log("üéµ Iniciando testes da Colet√¢nea de Letras...");

// ===== TESTE 1: SIMULA√á√ÉO DE CLIQUE EM BOT√ÉO DE LETRA =====
function testeToggleLetra() {
    console.log("\nüìù TESTE 1: Toggle de Letra");
    
    // Encontrar o primeiro bot√£o de letra
    const primeiroBtn = document.querySelector('.botao-toggle');
    
    if (primeiroBtn) {
        console.log("‚úÖ Bot√£o encontrado:", primeiroBtn.textContent);
        
        // Simular clique
        console.log("üñ±Ô∏è Simulando clique...");
        primeiroBtn.click();
        
        // Verificar estado ap√≥s clique
        setTimeout(() => {
            const expanded = primeiroBtn.getAttribute('aria-expanded');
            console.log("üìä Estado aria-expanded:", expanded);
            
            const animacao = primeiroBtn.parentElement.querySelector('.animacao-som');
            console.log("üé® Anima√ß√£o criada:", !!animacao);
            
            if (animacao) {
                const cor = window.getComputedStyle(animacao.querySelector('span')).backgroundColor;
                console.log("üåà Cor da anima√ß√£o:", cor);
            }
        }, 100);
    } else {
        console.log("‚ùå Nenhum bot√£o encontrado");
    }
}

// ===== TESTE 2: NAVEGA√á√ÉO PELO √çNDICE =====
function testeNavegacaoIndice() {
    console.log("\nüß≠ TESTE 2: Navega√ß√£o pelo √çndice");
    
    const linkIndice = document.querySelector('.indice-horizontal a');
    
    if (linkIndice) {
        console.log("‚úÖ Link do √≠ndice encontrado:", linkIndice.textContent);
        
        // Simular clique no √≠ndice
        console.log("üñ±Ô∏è Simulando clique no √≠ndice...");
        linkIndice.click();
        
        setTimeout(() => {
            const ativo = document.querySelector('.indice-horizontal a.ativo');
            console.log("üìç Link ativo:", ativo ? ativo.textContent : "Nenhum");
            
            const letraAberta = document.querySelector('.conteudo-letra.ativo');
            console.log("üìñ Letra aberta:", !!letraAberta);
        }, 600);
    } else {
        console.log("‚ùå Nenhum link do √≠ndice encontrado");
    }
}

// ===== TESTE 3: SISTEMA DE MODAIS =====
function testeModais() {
    console.log("\nü™ü TESTE 3: Sistema de Modais");
    
    // Teste modal QR
    console.log("üí∞ Testando modal de doa√ß√£o...");
    abrirModalQR();
    
    setTimeout(() => {
        const modal = document.getElementById('qrModal');
        const visivel = window.getComputedStyle(modal).display !== 'none';
        console.log("‚úÖ Modal QR vis√≠vel:", visivel);
        
        // Fechar modal
        fecharModalQR();
        
        setTimeout(() => {
            const fechado = window.getComputedStyle(modal).display === 'none';
            console.log("‚úÖ Modal QR fechado:", fechado);
        }, 100);
    }, 100);
}

// ===== TESTE 4: NOTIFICA√á√ïES =====
function testeNotificacoes() {
    console.log("\nüîî TESTE 4: Sistema de Notifica√ß√µes");
    
    mostrarNotificacao("Teste de notifica√ß√£o! üß™");
    
    setTimeout(() => {
        const notificacao = document.querySelector('.notificacao-copia');
        const visivel = notificacao && notificacao.classList.contains('ativo');
        console.log("‚úÖ Notifica√ß√£o vis√≠vel:", visivel);
        
        if (notificacao) {
            console.log("üìù Texto da notifica√ß√£o:", notificacao.textContent);
        }
    }, 100);
}

// ===== TESTE 5: CONVERS√ÉO DE SLUG =====
function testeSlugConversion() {
    console.log("\nüîó TESTE 5: Convers√£o de T√≠tulos para Slugs");
    
    const testes = [
        "Bora At√© a Vit√≥ria",
        "Um Abra√ßo do Tamanho do Mundo",
        "Quem Sabe Um Dia A Gente Aprende A Amar?",
        "Guerra N√£o √â Partida De Futebol"
    ];
    
    testes.forEach(titulo => {
        const slug = tituloParaSlug(titulo);
        console.log(`üìå "${titulo}" ‚Üí "${slug}"`);
    });
}

// ===== TESTE 6: PERFORMANCE E MEM√ìRIA =====
function testePerformance() {
    console.log("\n‚ö° TESTE 6: Performance e Uso de Mem√≥ria");
    
    const inicio = performance.now();
    
    // Abrir e fechar todas as letras rapidamente
    const botoes = document.querySelectorAll('.botao-toggle');
    console.log(`üî¢ Total de letras encontradas: ${botoes.length}`);
    
    let contador = 0;
    botoes.forEach((btn, index) => {
        setTimeout(() => {
            btn.click(); // Abrir
            
            setTimeout(() => {
                btn.click(); // Fechar
                contador++;
                
                if (contador === botoes.length) {
                    const fim = performance.now();
                    console.log(`‚è±Ô∏è Tempo total: ${(fim - inicio).toFixed(2)}ms`);
                    console.log(`üìä M√©dia por opera√ß√£o: ${((fim - inicio) / (botoes.length * 2)).toFixed(2)}ms`);
                }
            }, 100);
        }, index * 200);
    });
}

// ===== TESTE 7: ACESSIBILIDADE =====
function testeAcessibilidade() {
    console.log("\n‚ôø TESTE 7: Verifica√ß√£o de Acessibilidade");
    
    const botoes = document.querySelectorAll('.botao-toggle');
    let problemas = [];
    
    botoes.forEach((btn, index) => {
        // Verificar aria-expanded
        if (!btn.hasAttribute('aria-expanded')) {
            problemas.push(`Bot√£o ${index + 1}: Falta aria-expanded`);
        }
        
        // Verificar aria-controls
        if (!btn.hasAttribute('aria-controls')) {
            problemas.push(`Bot√£o ${index + 1}: Falta aria-controls`);
        }
        
        // Verificar foco
        if (!btn.tabIndex && btn.tabIndex !== 0) {
            // Ok, bot√µes s√£o foc√°veis por padr√£o
        }
    });
    
    console.log(`üîç Problemas de acessibilidade encontrados: ${problemas.length}`);
    problemas.forEach(problema => console.log(`‚ùå ${problema}`));
    
    if (problemas.length === 0) {
        console.log("‚úÖ Testes b√°sicos de acessibilidade passaram!");
    }
}

// ===== EXECU√á√ÉO AUTOM√ÅTICA DOS TESTES =====
function executarTodosTestes() {
    console.log("üöÄ Executando bateria completa de testes...\n");
    
    testeSlugConversion();
    
    setTimeout(() => {
        testeNotificacoes();
    }, 500);
    
    setTimeout(() => {
        testeModais();
    }, 1000);
    
    setTimeout(() => {
        testeToggleLetra();
    }, 2000);
    
    setTimeout(() => {
        testeNavegacaoIndice();
    }, 3000);
    
    setTimeout(() => {
        testeAcessibilidade();
    }, 4000);
    
    setTimeout(() => {
        testePerformance();
    }, 5000);
    
    setTimeout(() => {
        console.log("\nüéâ Todos os testes conclu√≠dos!");
        console.log("üìã Verifique os resultados acima para an√°lise detalhada.");
    }, 8000);
}

// ===== FUN√á√ïES UTILIT√ÅRIAS PARA DEBUGGING =====
function debugEstadoAtual() {
    console.log("\nüîç DEBUG: Estado Atual da Aplica√ß√£o");
    
    const letrasAbertas = document.querySelectorAll('.botao-toggle[aria-expanded="true"]');
    console.log(`üìñ Letras abertas: ${letrasAbertas.length}`);
    
    const animacoes = document.querySelectorAll('.animacao-som');
    console.log(`üé® Anima√ß√µes ativas: ${animacoes.length}`);
    
    const modaisAbertos = Array.from(document.querySelectorAll('[id$="Modal"]'))
        .filter(modal => window.getComputedStyle(modal).display !== 'none');
    console.log(`ü™ü Modais abertos: ${modaisAbertos.length}`);
    
    const notificacaoAtiva = document.querySelector('.notificacao-copia.ativo');
    console.log(`üîî Notifica√ß√£o ativa: ${!!notificacaoAtiva}`);
    
    console.log(`üîó URL atual: ${window.location.href}`);
}

function limparEstado() {
    console.log("üßπ Limpando estado da aplica√ß√£o...");
    
    // Fechar todas as letras
    document.querySelectorAll('.botao-toggle[aria-expanded="true"]')
        .forEach(btn => btn.click());
    
    // Fechar todos os modais
    fecharModalQR();
    fecharModalAutor();
    fecharModalDoacao();
    
    // Remover notifica√ß√µes
    const notificacao = document.querySelector('.notificacao-copia');
    if (notificacao) {
        notificacao.classList.remove('ativo');
    }
    
    console.log("‚úÖ Estado limpo!");
}

// ===== INSTRU√á√ïES DE USO =====
console.log(`
üéØ INSTRU√á√ïES DE USO:

1. executarTodosTestes() - Executa todos os testes automaticamente
2. testeToggleLetra() - Testa abertura/fechamento de letras
3. testeNavegacaoIndice() - Testa navega√ß√£o pelo √≠ndice
4. testeModais() - Testa sistema de modais
5. testeNotificacoes() - Testa notifica√ß√µes
6. testeSlugConversion() - Testa convers√£o de t√≠tulos
7. testePerformance() - Testa performance
8. testeAcessibilidade() - Verifica acessibilidade
9. debugEstadoAtual() - Mostra estado atual
10. limparEstado() - Limpa todos os estados

üìù Execute: executarTodosTestes()
`);

// Auto-executar se em ambiente de teste
if (window.location.search.includes('autotest=true')) {
    executarTodosTestes();
}